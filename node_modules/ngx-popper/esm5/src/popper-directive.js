/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ViewContainerRef, ComponentFactoryResolver, Input, Output, EventEmitter, Renderer2, ChangeDetectorRef, Inject, ElementRef } from '@angular/core';
import { Placements, Triggers } from './popper-model';
import { PopperContent } from './popper-content';
var PopperController = /** @class */ (function () {
    function PopperController(viewContainerRef, changeDetectorRef, resolver, elementRef, renderer, popperDefaults) {
        if (popperDefaults === void 0) { popperDefaults = {}; }
        this.viewContainerRef = viewContainerRef;
        this.changeDetectorRef = changeDetectorRef;
        this.resolver = resolver;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.popperDefaults = popperDefaults;
        this.popperContentClass = PopperContent;
        this.shown = false;
        this.subscriptions = [];
        this.eventListeners = [];
        this.globalEventListeners = [];
        this.hideTimeout = 0;
        this.timeoutAfterShow = 0;
        this.popperOnShown = new EventEmitter();
        this.popperOnHidden = new EventEmitter();
        this.popperOnUpdate = new EventEmitter();
        PopperController.baseOptions = tslib_1.__assign({}, PopperController.baseOptions, this.popperDefaults);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    PopperController.prototype.hideOnClickOutsideHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled || !this.hideOnClickOutside || $event.srcElement &&
            $event.srcElement === this.popperContent.elemRef.nativeElement ||
            this.popperContent.elemRef.nativeElement.contains($event.srcElement)) {
            return;
        }
        this.scheduledHide($event, this.hideTimeout);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PopperController.prototype.hideOnScrollHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled || !this.hideOnScroll) {
            return;
        }
        this.scheduledHide($event, this.hideTimeout);
    };
    /**
     * @return {?}
     */
    PopperController.prototype.applyTriggerListeners = /**
     * @return {?}
     */
    function () {
        switch (this.showTrigger) {
            case Triggers.CLICK:
                this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'click', this.toggle.bind(this)));
                break;
            case Triggers.MOUSEDOWN:
                this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'mousedown', this.toggle.bind(this)));
                break;
            case Triggers.HOVER:
                this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'mouseenter', this.scheduledShow.bind(this, this.showDelay)));
                this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'touchend', this.scheduledHide.bind(this, null, this.hideTimeout)));
                this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'touchcancel', this.scheduledHide.bind(this, null, this.hideTimeout)));
                this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'mouseleave', this.scheduledHide.bind(this, null, this.hideTimeout)));
                break;
        }
        if (this.showTrigger !== Triggers.HOVER && this.hideOnMouseLeave) {
            this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'touchend', this.scheduledHide.bind(this, null, this.hideTimeout)));
            this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'touchcancel', this.scheduledHide.bind(this, null, this.hideTimeout)));
            this.eventListeners.push(this.renderer.listen(this.elementRef.nativeElement, 'mouseleave', this.scheduledHide.bind(this, null, this.hideTimeout)));
        }
    };
    /**
     * @param {?} target
     * @param {...?} sources
     * @return {?}
     */
    PopperController.assignDefined = /**
     * @param {?} target
     * @param {...?} sources
     * @return {?}
     */
    function (target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        var e_1, _a, e_2, _b;
        try {
            for (var sources_1 = tslib_1.__values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
                var source = sources_1_1.value;
                try {
                    for (var _c = tslib_1.__values(Object.keys(source)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var key = _d.value;
                        /** @type {?} */
                        var val = source[key];
                        if (val !== undefined) {
                            target[key] = val;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) _a.call(sources_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return target;
    };
    /**
     * @return {?}
     */
    PopperController.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //Support legacy prop
        this.hideOnClickOutside = typeof this.hideOnClickOutside === 'undefined' ?
            this.closeOnClickOutside : this.hideOnClickOutside;
        if (typeof this.content === 'string') {
            /** @type {?} */
            var text = this.content;
            this.popperContent = this.constructContent();
            this.popperContent.text = text;
        }
        else {
            this.popperContent = this.content;
        }
        /** @type {?} */
        var popperRef = this.popperContent;
        popperRef.referenceObject = this.getRefElement();
        this.setContentProperties(popperRef);
        this.setDefaults();
        this.applyTriggerListeners();
        if (this.showOnStart) {
            this.scheduledShow();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PopperController.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['popperDisabled'] && changes['popperDisabled'].currentValue) {
            this.hide();
        }
        if (changes['content']
            && !changes['content'].firstChange
            && typeof changes['content'].currentValue === 'string') {
            this.popperContent.text = changes['content'].currentValue;
        }
        if (changes['applyClass']
            && !changes['applyClass'].firstChange
            && typeof changes['applyClass'].currentValue === 'string') {
            this.popperContent.popperOptions.applyClass = changes['applyClass'].currentValue;
        }
        if (changes['applyArrowClass']
            && !changes['applyArrowClass'].firstChange
            && typeof changes['applyArrowClass'].currentValue === 'string') {
            this.popperContent.popperOptions.applyArrowClass = changes['applyArrowClass'].currentValue;
        }
    };
    /**
     * @return {?}
     */
    PopperController.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe && sub.unsubscribe(); });
        this.subscriptions.length = 0;
        this.clearEventListeners();
        this.clearGlobalEventListeners();
        clearTimeout(this.scheduledShowTimeout);
        clearTimeout(this.scheduledHideTimeout);
        this.popperContent && this.popperContent.clean();
    };
    /**
     * @return {?}
     */
    PopperController.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.shown ? this.scheduledHide(null, this.hideTimeout) : this.scheduledShow();
    };
    /**
     * @return {?}
     */
    PopperController.prototype.show = /**
     * @return {?}
     */
    function () {
        if (this.shown) {
            this.overrideHideTimeout();
            return;
        }
        this.shown = true;
        /** @type {?} */
        var popperRef = this.popperContent;
        /** @type {?} */
        var element = this.getRefElement();
        if (popperRef.referenceObject !== element) {
            popperRef.referenceObject = element;
        }
        this.setContentProperties(popperRef);
        popperRef.show();
        this.popperOnShown.emit(this);
        if (this.timeoutAfterShow > 0) {
            this.scheduledHide(null, this.timeoutAfterShow);
        }
        this.globalEventListeners.push(this.renderer.listen('document', 'touchend', this.hideOnClickOutsideHandler.bind(this)));
        this.globalEventListeners.push(this.renderer.listen('document', 'click', this.hideOnClickOutsideHandler.bind(this)));
        this.globalEventListeners.push(this.renderer.listen(this.getScrollParent(this.getRefElement()), 'scroll', this.hideOnScrollHandler.bind(this)));
    };
    /**
     * @return {?}
     */
    PopperController.prototype.hide = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (!this.shown) {
            this.overrideShowTimeout();
            return;
        }
        this.shown = false;
        if (this.popperContentRef) {
            this.popperContentRef.instance.hide();
        }
        else {
            this.popperContent.hide();
        }
        this.popperOnHidden.emit(this);
        this.clearGlobalEventListeners();
    };
    /**
     * @param {?=} delay
     * @return {?}
     */
    PopperController.prototype.scheduledShow = /**
     * @param {?=} delay
     * @return {?}
     */
    function (delay) {
        var _this = this;
        if (delay === void 0) { delay = this.showDelay; }
        if (this.disabled) {
            return;
        }
        this.overrideHideTimeout();
        this.scheduledShowTimeout = setTimeout(function () {
            _this.show();
            _this.applyChanges();
        }, delay);
    };
    /**
     * @param {?=} $event
     * @param {?=} delay
     * @return {?}
     */
    PopperController.prototype.scheduledHide = /**
     * @param {?=} $event
     * @param {?=} delay
     * @return {?}
     */
    function ($event, delay) {
        var _this = this;
        if ($event === void 0) { $event = null; }
        if (delay === void 0) { delay = this.hideTimeout; }
        if (this.disabled) {
            return;
        }
        this.overrideShowTimeout();
        this.scheduledHideTimeout = setTimeout(function () {
            /** @type {?} */
            var toElement = $event ? $event.toElement : null;
            /** @type {?} */
            var popperContentView = _this.popperContent.popperViewRef ? _this.popperContent.popperViewRef.nativeElement : false;
            if (!popperContentView || popperContentView === toElement || popperContentView.contains(toElement) || ((/** @type {?} */ (_this.content))).isMouseOver) {
                return;
            }
            _this.hide();
            _this.applyChanges();
        }, delay);
    };
    /**
     * @return {?}
     */
    PopperController.prototype.getRefElement = /**
     * @return {?}
     */
    function () {
        return this.targetElement || this.viewContainerRef.element.nativeElement;
    };
    /**
     * @private
     * @return {?}
     */
    PopperController.prototype.applyChanges = /**
     * @private
     * @return {?}
     */
    function () {
        this.changeDetectorRef.markForCheck();
        this.changeDetectorRef.detectChanges();
    };
    /**
     * @private
     * @return {?}
     */
    PopperController.prototype.setDefaults = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDelay = typeof this.showDelay === 'undefined' ? PopperController.baseOptions.showDelay : this.showDelay;
        this.showTrigger = typeof this.showTrigger === 'undefined' ? PopperController.baseOptions.trigger : this.showTrigger;
        this.hideOnClickOutside = typeof this.hideOnClickOutside === 'undefined' ? PopperController.baseOptions.hideOnClickOutside : this.hideOnClickOutside;
        this.hideOnScroll = typeof this.hideOnScroll === 'undefined' ? PopperController.baseOptions.hideOnScroll : this.hideOnScroll;
        this.hideOnMouseLeave = typeof this.hideOnMouseLeave === 'undefined' ? PopperController.baseOptions.hideOnMouseLeave : this.hideOnMouseLeave;
        this.ariaRole = typeof this.ariaRole === 'undefined' ? PopperController.baseOptions.ariaRole : this.ariaRole;
        this.ariaDescribe = typeof this.ariaDescribe === 'undefined' ? PopperController.baseOptions.ariaDescribe : this.ariaDescribe;
        this.styles = typeof this.styles === 'undefined' ? Object.assign({}, PopperController.baseOptions.styles) : this.styles;
    };
    /**
     * @private
     * @return {?}
     */
    PopperController.prototype.clearEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.eventListeners.forEach(function (evt) {
            evt && typeof evt === 'function' && evt();
        });
        this.eventListeners.length = 0;
    };
    /**
     * @private
     * @return {?}
     */
    PopperController.prototype.clearGlobalEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.globalEventListeners.forEach(function (evt) {
            evt && typeof evt === 'function' && evt();
        });
        this.globalEventListeners.length = 0;
    };
    /**
     * @private
     * @return {?}
     */
    PopperController.prototype.overrideShowTimeout = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.scheduledShowTimeout) {
            clearTimeout(this.scheduledShowTimeout);
            this.scheduledHideTimeout = 0;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopperController.prototype.overrideHideTimeout = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.scheduledHideTimeout) {
            clearTimeout(this.scheduledHideTimeout);
            this.scheduledHideTimeout = 0;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopperController.prototype.constructContent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(this.popperContentClass);
        this.popperContentRef = this.viewContainerRef.createComponent(factory);
        return (/** @type {?} */ (this.popperContentRef.instance));
    };
    /**
     * @private
     * @param {?} popperRef
     * @return {?}
     */
    PopperController.prototype.setContentProperties = /**
     * @private
     * @param {?} popperRef
     * @return {?}
     */
    function (popperRef) {
        popperRef.popperOptions = PopperController.assignDefined(popperRef.popperOptions, PopperController.baseOptions, {
            showDelay: this.showDelay,
            disableAnimation: this.disableAnimation,
            disableDefaultStyling: this.disableStyle,
            placement: this.placement,
            boundariesElement: this.boundariesElement,
            trigger: this.showTrigger,
            positionFixed: this.positionFixed,
            popperModifiers: this.popperModifiers,
            ariaDescribe: this.ariaDescribe,
            ariaRole: this.ariaRole,
            applyClass: this.applyClass,
            applyArrowClass: this.applyArrowClass,
            hideOnMouseLeave: this.hideOnMouseLeave,
            styles: this.styles,
            appendTo: this.appendTo,
            preventOverflow: this.preventOverflow,
        });
        popperRef.onUpdate = this.onPopperUpdate.bind(this);
        this.subscriptions.push(popperRef.onHidden.subscribe(this.hide.bind(this)));
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    PopperController.prototype.getScrollParent = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var isElement = node instanceof HTMLElement;
        /** @type {?} */
        var overflowY = isElement && window.getComputedStyle(node).overflowY;
        /** @type {?} */
        var isScrollable = overflowY !== 'visible' && overflowY !== 'hidden';
        if (!node) {
            return null;
        }
        else if (isScrollable && node.scrollHeight >= node.clientHeight) {
            return node;
        }
        return this.getScrollParent(node.parentNode) || document;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PopperController.prototype.onPopperUpdate = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.popperOnUpdate.emit(event);
    };
    PopperController.baseOptions = (/** @type {?} */ ({
        showDelay: 0,
        placement: Placements.Auto,
        hideOnClickOutside: true,
        hideOnMouseLeave: false,
        hideOnScroll: false,
        showTrigger: Triggers.HOVER,
        appendTo: undefined,
        ariaRole: 'popper',
        ariaDescribe: '',
        styles: {}
    }));
    PopperController.decorators = [
        { type: Directive, args: [{
                    selector: '[popper]',
                    exportAs: 'popper'
                },] }
    ];
    /** @nocollapse */
    PopperController.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: ['popperDefaults',] }] }
    ]; };
    PopperController.propDecorators = {
        content: [{ type: Input, args: ['popper',] }],
        disabled: [{ type: Input, args: ['popperDisabled',] }],
        placement: [{ type: Input, args: ['popperPlacement',] }],
        showTrigger: [{ type: Input, args: ['popperTrigger',] }],
        targetElement: [{ type: Input, args: ['popperTarget',] }],
        showDelay: [{ type: Input, args: ['popperDelay',] }],
        hideTimeout: [{ type: Input, args: ['popperTimeout',] }],
        timeoutAfterShow: [{ type: Input, args: ['popperTimeoutAfterShow',] }],
        boundariesElement: [{ type: Input, args: ['popperBoundaries',] }],
        showOnStart: [{ type: Input, args: ['popperShowOnStart',] }],
        closeOnClickOutside: [{ type: Input, args: ['popperCloseOnClickOutside',] }],
        hideOnClickOutside: [{ type: Input, args: ['popperHideOnClickOutside',] }],
        hideOnScroll: [{ type: Input, args: ['popperHideOnScroll',] }],
        hideOnMouseLeave: [{ type: Input, args: ['popperHideOnMouseLeave',] }],
        positionFixed: [{ type: Input, args: ['popperPositionFixed',] }],
        popperModifiers: [{ type: Input, args: ['popperModifiers',] }],
        disableStyle: [{ type: Input, args: ['popperDisableStyle',] }],
        disableAnimation: [{ type: Input, args: ['popperDisableAnimation',] }],
        applyClass: [{ type: Input, args: ['popperApplyClass',] }],
        applyArrowClass: [{ type: Input, args: ['popperApplyArrowClass',] }],
        ariaDescribe: [{ type: Input, args: ['popperAriaDescribeBy',] }],
        ariaRole: [{ type: Input, args: ['popperAriaRole',] }],
        styles: [{ type: Input, args: ['popperStyles',] }],
        appendTo: [{ type: Input, args: ['popperAppendTo',] }],
        preventOverflow: [{ type: Input, args: ['popperPreventOverflow',] }],
        popperOnShown: [{ type: Output }],
        popperOnHidden: [{ type: Output }],
        popperOnUpdate: [{ type: Output }]
    };
    return PopperController;
}());
export { PopperController };
if (false) {
    /** @type {?} */
    PopperController.baseOptions;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.popperContentClass;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.popperContentRef;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.shown;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.scheduledShowTimeout;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.scheduledHideTimeout;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.eventListeners;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.globalEventListeners;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.popperContent;
    /** @type {?} */
    PopperController.prototype.content;
    /** @type {?} */
    PopperController.prototype.disabled;
    /** @type {?} */
    PopperController.prototype.placement;
    /** @type {?} */
    PopperController.prototype.showTrigger;
    /** @type {?} */
    PopperController.prototype.targetElement;
    /** @type {?} */
    PopperController.prototype.showDelay;
    /** @type {?} */
    PopperController.prototype.hideTimeout;
    /** @type {?} */
    PopperController.prototype.timeoutAfterShow;
    /** @type {?} */
    PopperController.prototype.boundariesElement;
    /** @type {?} */
    PopperController.prototype.showOnStart;
    /** @type {?} */
    PopperController.prototype.closeOnClickOutside;
    /** @type {?} */
    PopperController.prototype.hideOnClickOutside;
    /** @type {?} */
    PopperController.prototype.hideOnScroll;
    /** @type {?} */
    PopperController.prototype.hideOnMouseLeave;
    /** @type {?} */
    PopperController.prototype.positionFixed;
    /** @type {?} */
    PopperController.prototype.popperModifiers;
    /** @type {?} */
    PopperController.prototype.disableStyle;
    /** @type {?} */
    PopperController.prototype.disableAnimation;
    /** @type {?} */
    PopperController.prototype.applyClass;
    /** @type {?} */
    PopperController.prototype.applyArrowClass;
    /** @type {?} */
    PopperController.prototype.ariaDescribe;
    /** @type {?} */
    PopperController.prototype.ariaRole;
    /** @type {?} */
    PopperController.prototype.styles;
    /** @type {?} */
    PopperController.prototype.appendTo;
    /** @type {?} */
    PopperController.prototype.preventOverflow;
    /** @type {?} */
    PopperController.prototype.popperOnShown;
    /** @type {?} */
    PopperController.prototype.popperOnHidden;
    /** @type {?} */
    PopperController.prototype.popperOnUpdate;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PopperController.prototype.popperDefaults;
}
//# sourceMappingURL=data:application/json;base64,